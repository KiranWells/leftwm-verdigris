;; Eww configuration
;; This contains the widgets that make up most of the desktop,
;; including task bar and network, volume, and bluetooth controls

;; general variables

;; date/time
(defpoll DATE :interval "60s"  "date +'%a, %d %B'")
(defpoll HRS :interval "1s"  "date +\"%H\"")
(defpoll MIN :interval "1s"  "date +\"%M\"")

;; network
(defpoll NETWORK_STATUS :interval "3s" `./scripts/network-helper.py --status`)

;; bluetooth
(defpoll BLUETOOTH_CONN :interval "3s" `bluetoothctl show | grep "Powered: yes" | wc -c`)
(defpoll BLUETOOTH_DEV :interval "3s" `echo info | bluetoothctl | grep 'Device' | wc -c`)

;; volume
(defpoll VOLUME :interval "5s" `amixer -D pulse sget Master | awk "match(\\$0, /Left.*Playback [0-9]+ \\[([0-9]+)%\\]/, arr) {print arr[1]}"`)
(defpoll MUTE :interval "3s" `amixer -D pulse sget Master | awk "match(\\$0, /Left.*Playback [0-9]+ \\[[0-9]+%\\] \\[(on|off)\\]/, arr) {print arr[1]}"`)
(defpoll MICVOLUME :interval "5s" `amixer -D pulse sget Capture | awk "match(\\$0, /Left.*Capture [0-9]+ \\[([0-9]+)%\\]/, arr) {print arr[1]}"`)
(defpoll MICMUTE :interval "3s" `amixer -D pulse sget Capture | awk "match(\\$0, /Left.*Capture [0-9]+ \\[[0-9]+%\\] \\[(on|off)\\]/, arr) {print arr[1]}"`)

;; brightness
(defpoll BRIGHTNESS :interval "9s" `ddcutil getvcp 10 | awk 'match($0, "current value = +([0-9]+),", arr) {print(arr[1])}'`)

;; weather
(defpoll WEATHER_ICON :interval "60s" `./scripts/weather_info --icon`)
(defpoll WEATHER_TEMP :interval "60s" `./scripts/weather_info --temp`)

(include "modules/utils.yuck")
(include "modules/powermenu.yuck")
(include "modules/bar.yuck")
(include "modules/popups.yuck")
(include "modules/lock.yuck")

;; overlay widget for closing popups
(defwidget background-overlay [name]
  (button 
    :class "overlay" 
    :onclick "eww -c . close ${name} background-overlay"))

;; windows
(defwindow background-overlay 
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "100%"
    :anchor "center")
    :class "overlay"
    (background-overlay :name "quit weather date wifi bluetoothctl volume-extra"))

(defwindow bar
  :stacking "bg"
  :windowtype "dock"
  :reserve (struts :side "bottom" :distance "36px")
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :anchor "bottom left")
    :class "Ayu-Bar"
    (bar))

(defwindow quit 
  :geometry (geometry
    :x "0%"
    :y "0%"
    :anchor "center")
    (logout))

(defwindow weather
  :geometry (geometry
    :x "0px"
    :y "60px"
    :anchor "top left")
    (weather))

(defwindow date
  :geometry (geometry
    :x "0px"
    :y "60px"
    :anchor "top left")
    (date))

(defwindow volume-extra
  :geometry (geometry
    :x "0px"
    :y "60px"
    :anchor "top right")
    (volume-extra))

(defwindow wifi
  :geometry (geometry
    :x "0px"
    :y "60px"
    :anchor "top right")
    (wifi))

(defwindow bluetoothctl
  :geometry (geometry
    :x "0px"
    :y "60px"
    :anchor "top right")
    (bluetoothctl))

(defwindow lock-background
  :geometry (geometry
    :width "100%"
    :height "100%"
    :anchor "center")
    (background))
